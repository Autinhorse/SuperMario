using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class CreateLevels  {

	List<LevelDef> _localLevels;

	public LevelDef GetLevelDef( int index ) {
		return _localLevels[0];
	}

	public CreateLevels() {
		_localLevels = new List<LevelDef> ();

		// ************* 创建第一关 **************************************************************
		LevelDef levelDef = new LevelDef ();

		// ************* 第一段 ********************************
		LevelSegment segment = new LevelSegment();

		string[] segametData01 = {
			// 0
			//0        10	    20        30        40        50		60
			"0000000000000000000000000000000000000000000000000000000000000",
			"0000000000000000000000000000000000000000000000000000000000000",
			"0000000000000000000000000000000000000000000000000000000000000",
			"0000000000000000000000000000000000000000000000000000000000000",
			"0000000000000000000000000000000000000000000000000000000000000",
		   //0        10	    20        30        40        50		60
			// 5
		   //0        10	    20        30        40        50		60
			"0000000000000000000000000000000000000000000000000000000000000",
			"0000000000000000000000000000000000000000000000000000000000000",
			"0000000000000000000000000000000000000000000000000000000000000",
			"0000000000000000000000000000000000000000000000000000000000000",
			"0000000000000000000000000000000000000000000000000000000000000",
		   //0        10	    20        30        40        50		60
			// 10
		   //0        10	    20        30        40        50		60
			"0000000000000000000000000000000000000000000000000000000000000",
			"0000000000000000000000000000000000000000000000000000000000000",
			"0000000000000000000000000000000000000000000000000000000000000",
			"0000000000000000000000000000000000000000000000000000000000000",
			"0100000000000000000000000000000000000000000000000000000000001",
		   //0        10	    20        30        40        50		60
			// 15
		   //0        10	    20        30        40        50		60
			"0100000000000000000000003111111115000000000000000000000000001",
			"0100000000000000000000031111000001500000000000000000000000001",
			"0100000000000000000000311000000000150000000000000000000000001",
			"0100000000000000000003110000000000015000000000000000000000001",
			"01000000000000000000310000000000000011111114E0000000000000001",
		   //0        10	    20        30        40        50		60
			// 20
		   //0        10	    20        30        40        50		60
			"0100000000000002D11110000000000900000000000114E00000000000001",
			"01000000000002D110009900000000011111111110000114E000000000001",
			"010000000002D110000991111111111111111111111111111111110000001",
			"1111111111111111111111111111111111111111111111111111111111111",
			"1111111111111111111111111111111111111111111111111111110000111",
		   //0        10	    20        30        40        50		60
			// 25
		   //0        10	    20        30        40        50		60
			"1111111111111111111111111111111111111111111111111111110000111",
			"1111111111111111111111111111111111111111111111111111110000111"
		};
		segment.data = segametData01;

		segment.width = segment.data[0].Length;
		segment.height = segment.data.Length;

		segment.segmentStartPos = new MapPoint (0, 0);
		segment.startPoint = new MapPoint (4, 22);
		segment.endPoint = new MapPoint (60, 22);

		segment.lockScreenLeft = true;
		segment.lockScreenRight = false;
		segment.lockScreenTop = true;
		segment.lockScreenBottom = true;
		segment.CalculateBorder ();

		LevelElementCoinArrow elementCoinArrow = new LevelElementCoinArrow ( 24, 21, MapElement.Dir_Right );
		segment.elements.Add (elementCoinArrow);

		LevelElementPillar elementPillar = new LevelElementPillar ( 54, 19, MapElement.Dir_Up, 8 );
		segment.elements.Add (elementPillar);

		LevelElementQuestion elementQuestion = new LevelElementQuestion ( 10, 20, MapElement.Type_Mushroom );
		segment.elements.Add (elementQuestion);


		levelDef.segments.Add (segment);

		/*
		 * LevelSegment segment = new LevelSegment();
		string[] segametData01 = {
		   // 0
		   //0        10	    20        30        40        50		60
			"0000000000000000000000000000000000000000000000000000000000000",
			"0000000000000000000000000000000000000000000000000000000000000",
			"0000000000000000000000000000000000066666666000060000000000000",
			"0000000000000000000000000000000000000000006000060000000000000",
			"0000000000000000000000000000000000000000006000060000000000000",
		   //0        10	    20        30        40        50		60
    	   // 5
		   //0        10	    20        30        40        50		60
			"0000000000000000000000000000000000000000006000060000000000000",
			"0000000000000000000000000000000000000000006000060000000000000",
			"0000000000000000000000000006666660000000006000060000000000000",
			"0000000000000000000000000000000000000000006000060000000000000",
			"0000000000000000000000000000000000000000006000060000000000000",
		   //0        10	    20        30        40        50		60
		   // 10
		   //0        10	    20        30        40        50		60
			"0000000000000000000000000000009000000000006000060000000000000",
			"0000000000000000000000000000000900000000006000060000000000000",
			"0000000000000000000666666000000090000000006000060000000000000",
			"0000000000000000000000000000000000010000006000060000000000000",
			"0000000000000000000000000000000000010000006000060000000000000",
		   //0        10	    20        30        40        50		60
		   // 15
		   //0        10	    20        30        40        50		60
			"0000000000000000000000000000000000010000006000060000000000000",
			"0000000000000000000000000000000000000000006000060009000000000",
			"0000000000000666600000000000000009000000006000060090000000000",
			"0000000000000000000000000000000090000000000000060090000000000",
			"0000000000000000000000000000000090000000000000060900000000000",
		   //0        10	    20        30        40        50		60
		   // 20
		   //0        10	    20        30        40        50		60
			"0000000666676666600000000000000900000000000000060000000000000",
			"0000000000000000000099000000000111111111100000000000000000000",
			"0000000000000000000991111111111111111111111111111111110000000",
			"1111111111111111111111111111111111111111111111111111110000111",
			"1111111111111111111111111111111111111111111111111111110000111",
		   //0        10	    20        30        40        50		60
		   // 25
		   //0        10	    20        30        40        50		60
			"1111111111111111111111111111111111111111111111111111110000111",
			"1111111111111111111111111111111111111111111111111111110000111"
		};
		segment.data = segametData01;

		segment.width = segment.data[0].Length;
		segment.height = segment.data.Length;

		segment.segmentStartPos = new MapPoint (0, 0);
		segment.startPoint = new MapPoint (2, 22);
		segment.endPoint = new MapPoint (60, 22);

		segment.lockScreenLeft = true;
		segment.lockScreenRight = false;
		segment.lockScreenTop = true;
		segment.lockScreenBottom = true;
		segment.CalculateBorder ();

		LevelElementCoinArrow elementCoinArrow = new LevelElementCoinArrow ( 24, 21, MapElement.Dir_Right );
		segment.elements.Add (elementCoinArrow);

		LevelElementPillar elementPillar = new LevelElementPillar ( 54, 26, MapElement.Dir_Up, 8 );
		segment.elements.Add (elementPillar);

		LevelElementQuestion elementQuestion = new LevelElementQuestion ( 10, 20, MapElement.Type_Mushroom );
		segment.elements.Add (elementQuestion);


		levelDef.segments.Add (segment);
		*/
		// ************* 第一段 ********************************
		segment = new LevelSegment();

		string[] segametData02 = {
			// 0
			//0        10	    20        30        40        50		60
			"00000000000000000000000000000000000000000000000000000000000000000",
			"00000000000000000000000000000000000000000000000000000000000000000",
			"00000000000000000000000000000000000000000000000000000000000000000",
			"00000000000000000000000000000000000000000000000000000000000000000",
			"00000000000000000000000000000000000000000000000000000000000000000",
			//0        10	    20        30        40        50		60
			// 5
			//0        10	    20        30        40        50		60
			"00000000000000000000000000000000000000000000000000000000000000000",
			"00000000000000000000000000000000000000000000000000000000000000000",
			"00000000000000000000000000000000000000000000000000000000000000000",
			"00000000000000000000000000000000000000000000000000000000000000000",
			"00000000000000000000000000000000000000000000000000000000009990000",
			//0        10	    20        30        40        50		60
			// 10
			//0        10	    20        30        40        50		60
			"0000000000000000000000000000000000000000000000000000000000aaa0000",
			"00000000000000000000000000000000000000000000000000000000000000000",
			"00000000000000000000000000000000000000000000000000000000000000000",
			"00000000000000000000000000000000000000000000000000000000000000000",
			"00000000000000000000000000000000000000000000000000000000000000000",
			//0        10	    20        30        40        50		60
			// 15
			//0        10	    20        30        40        50		60
			"00000000000000000000000000000000070700000000000000067000000000000",
			"00000000000000000000000000000000000000000000000000000000000000000",
			"00000000000000000000000000000000000000000000000000000000000000000",
			"00000000000000000000000000000000000000000000000000000000000000000",
			"00000700000000000000000000000000768670000000111111114000000000000",
			//0        10	    20        30        40        50		60
			// 20
			//0        10	    20        30        40        50		60
			"00000000000000000000000000000000000000000000111111111140000000000",
			"00000000000000000000990000000000000000000000111111111111400000000",
			"00000000031111111111111110140000000000000011111111111111114000000",
			"11111111111111111111111111111111111111110011111111111111111111111",
			"11111111111111111111111111111111111111110011111111111111111111111",
			//0        10	    20        30        40        50		60
			// 25
			//0        10	    20        30        40        50		60
			"11111111111111111111111111111111111111110011111111111100001111111",
			"11111111111111111111111111111111111111110011111111111100001111111"
		};
		segment.data = segametData02;

		segment.width = segment.data[0].Length;
		segment.height = segment.data.Length;

		segment.segmentStartPos = new MapPoint (61, 0);
		segment.startPoint = new MapPoint (2, 22);
		segment.endPoint = new MapPoint (64, 22);

		segment.lockScreenLeft = false;
		segment.lockScreenRight = false;
		segment.lockScreenTop = true;
		segment.lockScreenBottom = true;
		segment.CalculateBorder ();



		LevelElementStop elementStop = new LevelElementStop ( 24, 21, MapElement.Dir_Right );
		segment.elements.Add (elementStop);

		elementQuestion = new LevelElementQuestion ( 34, 15, MapElement.Type_Life );
		segment.elements.Add (elementQuestion);

		levelDef.segments.Add (segment);

		_localLevels.Add (levelDef);
	}
}
